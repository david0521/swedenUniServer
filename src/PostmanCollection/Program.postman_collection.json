{
	"info": {
		"_postman_id": "c108a47e-90c9-4134-81b5-b04206f5a6b5",
		"name": "Program",
		"description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE).\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## üí°Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "29410530"
	},
	"item": [
		{
			"name": "Login for test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {\r",
							"    const response = pm.response.json();\r",
							"    pm.environment.set(\"JWT\", response.token);\r",
							"    pm.environment.set(\"refreshToken\", response.refreshToken);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test4@test.com\",\r\n    \"password\": \"123456789\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{host}}/auth/login"
			},
			"response": []
		},
		{
			"name": "Refresh token test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {\r",
							"    const response = pm.response.json();\r",
							"    pm.environment.set(\"JWT\", response.token);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"refreshToken\": \"{{refreshToken}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{host}}/auth/refreshToken"
			},
			"response": []
		},
		{
			"name": "Get Programs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{host}}/programs",
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Programs Query 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/programs/search?programType=%EC%9D%B4%EA%B3%BC&prerequisites=Math3B",
					"host": [
						"{{host}}"
					],
					"path": [
						"programs",
						"search"
					],
					"query": [
						{
							"key": "programType",
							"value": "%EC%9D%B4%EA%B3%BC"
						},
						{
							"key": "prerequisites",
							"value": "Math3B"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Program By University Name 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/programs/byUniversity?universityName=University%20of%20Gothenburg",
					"host": [
						"{{host}}"
					],
					"path": [
						"programs",
						"byUniversity"
					],
					"query": [
						{
							"key": "universityName",
							"value": "University%20of%20Gothenburg"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Program By University Name 400 (None)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message is correct\", function() {",
							"    pm.expect(pm.response.text()).to.include(\"ÎåÄÌïôÍµê Ï†ïÎ≥¥Í∞Ä ÏûÖÎ†•ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.\")",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/programs/byUniversity",
					"host": [
						"{{host}}"
					],
					"path": [
						"programs",
						"byUniversity"
					],
					"query": [
						{
							"key": "universityName",
							"value": "University%20of%20Gothenburg",
							"disabled": true
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Program By University Name 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"ÏãúÏä§ÌÖúÏóê Îì±Î°ùÎêòÏßÄ ÏïäÏùÄ ÎåÄÌïôÍµêÏûÖÎãàÎã§.\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/programs/byUniversity?universityName=Seoul%20National%20University",
					"host": [
						"{{host}}"
					],
					"path": [
						"programs",
						"byUniversity"
					],
					"query": [
						{
							"key": "universityName",
							"value": "Seoul%20National%20University"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Program Prerequisites 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/programs/byPrerequisites?prerequisites=Physics2&prerequisites=Math4",
					"host": [
						"{{host}}"
					],
					"path": [
						"programs",
						"byPrerequisites"
					],
					"query": [
						{
							"key": "prerequisites",
							"value": "Math3B",
							"disabled": true
						},
						{
							"key": "prerequisites",
							"value": "Physics2"
						},
						{
							"key": "prerequisites",
							"value": "Math4"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Program Prerequisites 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÏûêÍ≤©ÏöîÍ±¥:\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/programs/byPrerequisites?prerequisites=Magic&prerequisites=Physics2",
					"host": [
						"{{host}}"
					],
					"path": [
						"programs",
						"byPrerequisites"
					],
					"query": [
						{
							"key": "prerequisites",
							"value": "Magic"
						},
						{
							"key": "prerequisites",
							"value": "Physics2"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Program ID 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{host}}/programs/65fb79e7a459d4313988b392",
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Program ID 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"ÏãúÏä§ÌÖúÏóê Îì±Î°ùÎêòÏßÄ ÏïäÏùÄ ÌîÑÎ°úÍ∑∏Îû®ÏûÖÎãàÎã§.\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{host}}/programs/65fb79e7a459d4313988b391",
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Program By Name 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{host}}/programs/name/Software%20Engineering%20and%20Management",
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Program Likes 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"message\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/programs/prospective/program?program=Software%20Engineering%20and%20Management",
					"host": [
						"{{host}}"
					],
					"path": [
						"programs",
						"prospective",
						"program"
					],
					"query": [
						{
							"key": "program",
							"value": "Software%20Engineering%20and%20Management"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Post Program 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Success message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"ÏÉàÎ°úÏö¥ ÌîÑÎ°úÍ∑∏Îû®Ïù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.\");",
							"})",
							"",
							"const response = pm.response.json();",
							"pm.environment.set(\"deleteProgram\", response.program._id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{JWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"programName\": \"Random Test Program\",\n    \"programCode\": \"00000\",\n    \"programUniversity\": \"Test\",\n    \"programDescription\": \"Just a Test\",\n    \"programPrerequisites\": [\"Math4\", \"Physics2\"],\n    \"programTuition\": 100000000,\n    \"type\": \"Ïù¥Í≥º\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{host}}/programs",
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Post Program 400 (info)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Failure message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"ÏÉàÎ°úÏö¥ ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Îì±Î°ùÌïòÍ∏∞ ÏúÑÌï¥ÏÑú Îã§Ïùå Ï†ïÎ≥¥Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§: Ïù¥Î¶Ñ, ÌïôÍ≥ºÏΩîÎìú, ÏûêÍ≤©ÏöîÍ±¥, ÌïôÎπÑ\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{JWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"programName\": \"Test Program\",\n    \"programCode\": \"00000\",\n    \"programDescription\": \"Just a Test\",\n    \"programPrerequisites\": [\"Math4\", \"Physics2\"],\n    \"programTuition\": 100000000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{host}}/programs",
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Post Program 400 (prerequisite)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Failure message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"ÏÉàÎ°úÏö¥ ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Îì±Î°ùÌïòÍ∏∞ ÏúÑÌï¥ÏÑú Îã§Ïùå Ï†ïÎ≥¥Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§:\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{JWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"programName\": \"Test Program\",\n    \"programCode\": \"00000\",\n    \"programUniversity\": \"Test University\",\n    \"programDescription\": \"Just a Test\",\n    \"programPrerequisites\": [\"Math4\", \"Magic2\"],\n    \"programTuition\": 100000000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{host}}/programs",
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Post Program 400 (programType)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Failure message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Í≤åÏó¥ÏûÖÎãàÎã§.\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{JWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"programName\": \"Test Program\",\n    \"programCode\": \"00000\",\n    \"programUniversity\": \"Test University\",\n    \"programDescription\": \"Just a Test\",\n    \"programPrerequisites\": [\"Math4\"],\n    \"programTuition\": 100000000,\n    \"type\": \"ÏÇ¨Í≥º\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{host}}/programs",
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Post Program 409",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Îã§Ïùå ÌîÑÎ°úÍ∑∏Îû®ÏùÄ Ïù¥ÎØ∏ ÏãúÏä§ÌÖúÏóê Îì±Î°ùÎêòÏñ¥ ÏûàÏäµÎãàÎã§.\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{JWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"programName\": \"Software Engineering and Management\",\n    \"programCode\": \"N1SOF\",\n    \"programUniversity\": \"University of Gothenburg\",\n    \"programDescription\": \"A program where you learn about programming and management\",\n    \"programPrerequisites\": [\"Math3B\"],\n    \"programTuition\": 100,\n    \"type\": \"Ïù¥Í≥º\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{host}}/programs",
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Patch Program 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "authorization",
						"value": "{{JWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"prerequisite\": [\"Math3\", \"Physics2\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{host}}/programs/666b753bd9e40dcd39d98f3e",
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Patch Program 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Îã§Ïùå IDÎ°ú Îì±Î°ùÎêú ÌîÑÎ°úÍ∑∏Îû®Ïù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{JWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"prerequisite\": [\"Math3\", \"Physics2\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{host}}/programs/65a83ef98dee45bb7cc34d13",
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Program 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÌïòÏòÄÏäµÎãàÎã§.\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{JWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{host}}/programs/{{deleteProgram}}",
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Program 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Failure message is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Îã§Ïùå IDÎ°ú Îì±Î°ùÎêú ÌîÑÎ°úÍ∑∏Îû®Ïù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{JWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{host}}/programs/666b76d0d9e40dcd39d98f53",
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}